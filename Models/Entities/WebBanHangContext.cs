// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WebBanHang.Models.Entities;

public partial class WebBanHangContext : DbContext
{
    public WebBanHangContext(DbContextOptions<WebBanHangContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Brands> Brands { get; set; }

    public virtual DbSet<Cart> Cart { get; set; }

    public virtual DbSet<CartProduct> CartProduct { get; set; }

    public virtual DbSet<Category> Category { get; set; }

    public virtual DbSet<Introduce> Introduce { get; set; }

    public virtual DbSet<Order> Order { get; set; }

    public virtual DbSet<OrderDetail> OrderDetail { get; set; }

    public virtual DbSet<Product> Product { get; set; }

    public virtual DbSet<Review> Review { get; set; }

    public virtual DbSet<Setting> Setting { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    public virtual DbSet<VCart> VCart { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Brands>(entity =>
        {
            entity.Property(e => e.Avatar).HasMaxLength(100);
            entity.Property(e => e.CreatedOnUtc).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Slug).HasMaxLength(100);
            entity.Property(e => e.UpdateOnUtc).HasColumnType("datetime");
        });

        modelBuilder.Entity<Cart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Cart__3214EC07B68EF535");

            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LatestUpdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.User).WithMany(p => p.Cart)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cart_User");
        });

        modelBuilder.Entity<CartProduct>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CartProd__3214EC070A859DB7");

            entity.HasOne(d => d.Cart).WithMany(p => p.CartProduct)
                .HasForeignKey(d => d.CartId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CartProduct_Cart");

            entity.HasOne(d => d.Product).WithMany(p => p.CartProduct)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CartProduct_Product");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.Property(e => e.Avatar)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.CreatedOnUtc).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Slug).HasMaxLength(100);
            entity.Property(e => e.UpdateOnUtc).HasColumnType("datetime");
        });

        modelBuilder.Entity<Introduce>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Introduc__3214EC07E3DBC119");

            entity.Property(e => e.ShortDescription).HasMaxLength(200);
            entity.Property(e => e.Title).HasMaxLength(100);
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.Property(e => e.CreatedOnUtc).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.Property(e => e.Avatar)
                .HasMaxLength(100)
                .IsFixedLength();
            entity.Property(e => e.CreatedOnUtc).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Slug)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Stock).HasDefaultValueSql("((200))");
            entity.Property(e => e.UpdatedOnUtc).HasColumnType("datetime");

            entity.HasOne(d => d.Category).WithMany(p => p.Product)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK_ProductCategory");
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Review__3214EC07A7EB0BA2");

            entity.Property(e => e.Comment).HasMaxLength(1000);
            entity.Property(e => e.Star).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserId).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.Product).WithMany(p => p.Review)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReviewProduct");

            entity.HasOne(d => d.User).WithMany(p => p.Review)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReviewUsers");
        });

        modelBuilder.Entity<Setting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Setting__3214EC07F155357C");

            entity.Property(e => e.Key).HasMaxLength(50);
            entity.Property(e => e.Value).HasMaxLength(2000);
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.LastName).HasMaxLength(50);
            entity.Property(e => e.Password).HasMaxLength(50);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VCart>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCart");

            entity.Property(e => e.Avatar)
                .HasMaxLength(100)
                .IsFixedLength();
            entity.Property(e => e.ProductName).HasMaxLength(255);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}